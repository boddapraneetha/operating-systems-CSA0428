#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2
#define NUM_INCREMENTS 1000000

int counter = 0;

pthread_mutex_t counter_mutex;

void* increment_counter(void* arg) {
    for (int i = 0; i < NUM_INCREMENTS; i++) {

        pthread_mutex_lock(&counter_mutex);
        counter++;

        pthread_mutex_unlock(&counter_mutex);
    }
    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];

    if (pthread_mutex_init(&counter_mutex, NULL) != 0) {
        printf("Failed to initialize mutex\n");
        return 1;
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_create(&threads[i], NULL, increment_counter, NULL) != 0) {
            printf("Failed to create thread %d\n", i);
            return 1;
        }
    }

    for (int i = 0; i < NUM_THREADS; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            printf("Failed to join thread %d\n", i);
            return 1;
        }
    }

    pthread_mutex_destroy(&counter_mutex);

    printf("Final counter value: %d\n", counter);

    return 0;
}
