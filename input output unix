#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>

#define FILENAME "example.txt"

void file_operations() {
    int fd;
    struct stat file_stat;
    off_t offset;

    fd = open(FILENAME, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }
    printf("File opened successfully.\n");

    
  {
        perror("Error getting file descriptor flags");
        close(fd);
        exit(EXIT_FAILURE);
    }
    if ((fd, O_APPEND) == -1) {
        perror("Error setting file descriptor flags");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("File descriptor flags modified successfully.\n");

    offset = lseek(fd, 0, SEEK_END);
    if (offset == -1) {
        perror("Error seeking in file");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("File seeked to end successfully. Offset: %ld\n", offset);

    if (stat(FILENAME, &file_stat) == -1) {
        perror("Error getting file status");
        close(fd);
        exit(EXIT_FAILURE);
    }
    printf("File size: %ld bytes\n", file_stat.st_size);
    printf("Number of links: %ld\n", file_stat.st_nlink);
    printf("File permissions: %o\n", file_stat.st_mode);

    close(fd);
}

void directory_operations(const char *dir_name) {
    DIR *dir;
    struct dirent *entry;

    dir = opendir(dir_name);
    if (dir == NULL) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }
    printf("Directory opened successfully.\n");

    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    closedir(dir);
}

int main(int argc, char *argv[]) {
    const char *dir_name;

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <directory>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    dir_name = argv[1];
    file_operations();

    directory_operations(dir_name);

    return 0;
}
